-- vim: ft=lua

-- ???
--
-- ???
-- ???
vim.g.loaded = 1
vim.g.loaded_netrwPlugin = 1

vim.o.background = 'dark'

-- Disable line wrapping
--
-- By default vim will wrap a line when it gets too long
-- to fit in the current window size. I hate line wrapping
-- and would rather it just gets cut off. This does that.
vim.o.wrap = 0


-- Show line numbers
--
-- This will show line numbers in
-- the far left column in each pane.
vim.o.number = 1


-- Tab settings
--
-- A tab should be shown as 4 spaces, and
-- any time a tab in inserted, replace
-- with 4 spaces instead.
vim.o.expandtab = 1
vim.o.tabstop = 4
vim.o.shiftwidth = 4

-- Split below and right
vim.o.splitbelow = 1
vim.o.splitright = 1

-- Fix C indentation for switch
--
-- The default indent action for switch statements
-- in C makes me want to gouge out my eyeballs.
vim.o.cinoptions = l1


-- Enable Hidden Buffers
--
-- Allow us to have unsaved hidden buffers which act
-- similar to how tabs in other editors are used.
vim.o.hidden = 1

-- Enable cursor line
--
-- This option creates a slightly lighter background line
-- for the line the cursor is on. It really helps with
-- easily visually identifying the current cursor line.
vim.o.cursorline = true


-- Auto resize windows
--
-- The VimResized event occurs "After the Vim window was resized". We use
-- that to run the command to redestribute all the window borders. This
-- allows zooming when using tmux to play nice with vim.
vim.api.nvim_create_autocmd({"VimResized"}, {pattern = '*', command = "wincmd ="})


-- Configure clipboard
--
-- ???
vim.o.clipboard = 'unnamed'
vim.g.clipboard = {
    copy = {
{{ if eq .osid "linux-ubuntu-wsl" }} ['+'] = 'win32yank.exe -i', {{ end }}
{{ if eq .osid "linux-ubuntu-wsl" }} ['*'] = 'win32yank.exe -i', {{ end }}
{{ if eq .osid "linux-fedora" }}     ['+'] = 'xclip -selection c', {{ end }}
{{ if eq .osid "linux-fedora" }}     ['*'] = 'xclip -selection c', {{ end }}
{{ if eq .osid "darwin" }}           ['+'] = 'pbcopy', {{ end }}
{{ if eq .osid "darwin" }}           ['*'] = 'pbcopy', {{ end }}
    },
    paste = {
{{ if eq .osid "linux-ubuntu-wsl" }} ['+'] = 'win32yank.exe -o', {{ end }}
{{ if eq .osid "linux-ubuntu-wsl" }} ['*'] = 'win32yank.exe -o', {{ end }}
{{ if eq .osid "linux-fedora" }}     ['+'] = 'xclip -selection c -o', {{ end }}
{{ if eq .osid "linux-fedora" }}     ['*'] = 'xclip -selection c -o', {{ end }}
{{ if eq .osid "darwin" }}           ['+'] = 'pbpaste', {{ end }}
{{ if eq .osid "darwin" }}           ['*'] = 'pbpaste', {{ end }}
    },
    cache_enabled=true,
}

-- Vim-Plug
local Plug = vim.fn['plug#']
vim.call('plug#begin', '~/.config/nvim/plugged')

Plug('alexghergh/nvim-tmux-navigation')
Plug('nvim-treesitter/nvim-treesitter')
-- Plug('micha/vim-colors-solarized')
Plug('lifepillar/vim-solarized8')
Plug('nvim-lua/plenary.nvim')
Plug('nvim-telescope/telescope.nvim', {tag = '0.1.0' })
Plug('kyazdani42/nvim-tree.lua')
Plug('numToStr/comment.nvim')
Plug('nvim-lualine/lualine.nvim')
Plug('romgrk/barbar.nvim')
Plug('lewis6991/gitsigns.nvim')
-- Plug('p00f/nvim-ts-rainbow')

vim.call('plug#end')




-- Dimming inactive vim windows
--
-- When a windows is not active, it should become the same
-- background color as an inactive tmux pane. We do this via
-- the highlight and winghighlight functionality. This needs
-- to happen after we set the colorscheme
--
-- TODO: not working. Probably because color scheme
--       is set via an autocmd

function setDimInactiveWindows()
    vim.cmd('highlight Normal guibg=none')
    vim.cmd('highlight InactiveWindow guibg=none')
    vim.cmd('set winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow')
end

vim.api.nvim_create_autocmd({"ColorScheme"}, {pattern='*', callback=setDimInactiveWindows})

--
--
vim.opt.termguicolors = true

-- Set the colorscheme using a autocmd
--
-- We want to always set the colorscheme after loading plugins and
-- starting vim. Nested is needed for the status line at the
-- bottom to work correctly.
vim.api.nvim_create_autocmd({"VimEnter"}, {nested=true, pattern='*', command="colorscheme solarized8"})


-- Configure Lualine Plugin
require('lualine').setup {
    options = {
        theme = 'solarized_dark',
    },
    sections = {
        lualine_b = {},
        lualine_x = {},
    },
}


-- Configure gitsigns Plugin
require('gitsigns').setup()


-- Configure Buffer Line Plugin
require('bufferline').setup {
    icons = false,
    animation = false,
}


-- Configure Tree Plugin
local nvimtree = require('nvim-tree.events')
local bufferline = require('bufferline.api')

local function get_tree_size()
  return require'nvim-tree.view'.View.width
end

nvimtree.subscribe('TreeOpen', function()
  bufferline.set_offset(get_tree_size())
end)

nvimtree.subscribe('Resize', function()
  bufferline.set_offset(get_tree_size())
end)

nvimtree.subscribe('TreeClose', function()
  bufferline.set_offset(0)
end)

require('nvim-tree').setup {
    view = {
        adaptive_size = true,
    },
    renderer = {
        group_empty = true,
    },
--    update_focused_file = {
--        enable = true,
--    },
    actions = {
        open_file = {
            quit_on_open = true,
            window_picker = {enable=false},
        },
    },
}


-- Configure Comment Plugin
require('Comment').setup {
    toggler = {
        line = '<C-/>',
    },
}

-- Configure Bufferline
-- require("bufferline").setup {

-- }


-- Configure Tmux Navigation
local nvim_tmux_navigation = require('nvim-tmux-navigation')
nvim_tmux_navigation.setup {
    disable_when_zoomed = true,
}


-- Configure treesitter
local treesitter = require('nvim-treesitter.configs')
treesitter.setup {
    ensure_installed = {"c", "cpp", "lua", "fish", "vim", "help"},
    highlight = {
        enable = true
    },

    -- Config for nvim-ts-rainbow
    -- Currently disable until colors
    -- are fixed. Looks bad right now.
    rainbow = {
        enable = false,
	extended_mode = true,
	max_file_lines = nil,
    },
}

-- Configure telescope
require('telescope').setup {
    defaults = {
        path_display={smart},
    },
}

-- Killing Windows
function killWindow()
    vim.api.nvim_win_close(0, false)
end

-- A function for using comment.nvim
-- in visual block mode.
function visualComment()
    local comment = require('Comment.api')
    local esc = vim.api.nvim_replace_termcodes('<ESC>', true, false, true)
    vim.api.nvim_feedkeys(esc, 'nx', false)
    comment.toggle.linewise(vim.fn.visualmode())
end


-- Key Map
--
-- First Arg: mode
-- Second Arg: keycode
-- Third Arg: action
local mapkey = vim.keymap.set
local telescope = require('telescope.builtin')
local nvimtree = require('nvim-tree.api')
local comment = require('Comment.api')
mapkey({'n', 'i'}, '<C-t>', telescope.builtin, {})
mapkey({'n', 'i'}, '<C-p>', telescope.find_files, {})
mapkey({'n', 'i'}, '<C-f>', telescope.live_grep, {})
mapkey({'n'},      '<C-c>', '<CMD>BufferClose<CR>')
mapkey({'n'},      '<C-x>', killWindow)
mapkey({'n', 'i'}, '<C-_>', comment.toggle.linewise.current) -- actually <C-/>
mapkey({'x'},      '<C-_>', visualComment)                   -- actually <C-/>
mapkey({'n', 'i'}, '<C-PageUp>',   '<Cmd>BufferPrevious<CR>')
mapkey({'n', 'i'}, '<C-PageDown>', '<Cmd>BufferNext<CR>')
mapkey({'n'}, '|', ':vsplit<CR>', {silent=true})  -- TODO: make <C-|> work
mapkey({'n'}, '-', ':split<CR>',  {silent=true})  -- TODO: make <C--> work
mapkey({'n', 'i'}, '<M-Left>',  nvim_tmux_navigation.NvimTmuxNavigateLeft)
mapkey({'n', 'i'}, '<M-Right>', nvim_tmux_navigation.NvimTmuxNavigateRight)
mapkey({'n', 'i'}, '<M-Up>',    nvim_tmux_navigation.NvimTmuxNavigateUp)
mapkey({'n', 'i'}, '<M-Down>',  nvim_tmux_navigation.NvimTmuxNavigateDown)
mapkey({'n', 'i'}, '<C-b>',     nvimtree.tree.toggle)
mapkey({'n'}, '?', telescope.grep_string, {})

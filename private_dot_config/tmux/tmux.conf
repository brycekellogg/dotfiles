
# Mouse Support
set -g mouse on

# If this were on, programs could change the name
# of the window (using terminal escape sequences).
# We don't want that, so we disable it here.
set-option -g allow-rename off

# Fix annoying ESC problem
set -s escape-time 1

# Fix issue where vim doesn't get FocusGained or
# FocusLost events. This fixes that for use in gitgutter:
# See: https://github.com/tmux-plugins/vim-tmux-focus-events
set -g focus-events on

# Copy and paste settings
set-window-option -g mode-keys vi
set -g set-clipboard off # stop garbage on copy

# Unbind the various keys for panel & window
# control that are replaced or unused.
# TODO: unbind all
unbind '"'
unbind '%'

set -g prefix none
set -g prefix2 none


unbind -T copy-mode     MouseDragEnd1Pane
unbind -T copy-mode-vi  MouseDragEnd1Pane

#############################
### Visual Customizations ###
#############################

# Change background color of current pane
set -g window-style        'fg=colour014,bg=colour000'
set -g window-active-style 'fg=colour014,bg=colour008'

# set the pane border colors
set -g pane-border-style 'fg=colour002,bg=colour000'
set -g pane-active-border-style 'fg=colour002,bg=colour008'

# Right Status: Clock
set -g status-right "%a %d %b, %I:%M %p"

# Set Terminal
set -g default-terminal "screen-256color"

# default statusbar colors
set-option -g status-bg colour235 #base02
set-option -g status-fg colour136 #yellow

# Window Names
set-window-option -g automatic-rename off
set-window-option -g automatic-rename-format 'Tab #{window_id}'
set-window-option -g window-status-current-format ' #W '
set-window-option -g window-status-current-style 'bg=colour237'
set-window-option -g window-status-format ' #W '
set-window-option -g window-status-separator '|'
set-option -g status-left ''

##############################
### Window & Pane Controls ###
##############################

# Panels can be navigated between by using Alt-<Arrow Key> to go
# to the panel in the direction of the arrow key. This respects
# edges and does not wrap around. Integration with vim splits is
# done using the vim-tmux-navigator plugin.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-Left  if-shell "$is_vim" "send-keys M-Left"  "if -F '#{?pane_at_left,0,1}'   'select-pane -L'"
bind-key -n M-Down  if-shell "$is_vim" "send-keys M-Down"  "if -F '#{?pane_at_bottom,0,1}' 'select-pane -D'"
bind-key -n M-Up    if-shell "$is_vim" "send-keys M-Up"    "if -F '#{?pane_at_top,0,1}'    'select-pane -U'"
bind-key -n M-Right if-shell "$is_vim" "send-keys M-Right" "if -F '#{?pane_at_right,0,1}'  'select-pane -R'"

# If we are in copy mode, we navidate panels
# irrespective of if we are in vim or not. The
# reason for this is to allow copying non-content
# from vim (such as filenames).
bind-key -T copy-mode-vi M-Left  select-pane -L
bind-key -T copy-mode-vi M-Down  select-pane -D
bind-key -T copy-mode-vi M-Up    select-pane -U
bind-key -T copy-mode-vi M-Right select-pane -R

# Panels can be moved by swapping the current pane with a
# one of the adjacent panes with Alt-Shift-<Arrow Key>.
# TODO: prevent swapping towards the edges
# TODO: resize current pane somehow using these, no swapping
bind-key -n M-S-Left  swap-pane -t '{left-of}'
bind-key -n M-S-Down  swap-pane -t '{down-of}'
bind-key -n M-S-Up    swap-pane -t '{up-of}'
bind-key -n M-S-Right swap-pane -t '{right-of}'

# We can select windows with Alt-PageUp & Alt-PageDown
# where Alt-PageUp selects the window to the left, and
# Alt-PageDown selects the window to the right.
# Additionally, we check if the current window is
# the first or last window to prevent wrap around.
is_first="[[ #{window_start_flag} == 1 ]]"
is_last="[[ #{window_end_flag} == 1 ]]"
bind -n M-PageUp   if-shell "$is_first" "" "select-window -p"
bind -n M-PageDown if-shell "$is_last"  "" "select-window -n"

# We rename a window/tab
bind-key -n M-r command-prompt -I "#W" "rename-window -- '%%'"

# bind-key -n M-k TODO kill pane

# We create new panels by splitting either vertically
# using Alt-| or splitting horizontally using Alt--
# New panes are opened to either the right or bottom
# of the current panel.
bind -n M-| split-window -h -c "#{pane_current_path}"
bind -n M-- split-window -v -c "#{pane_current_path}"

# New windows are created using Alt-+
# (Alt-Shift-=) to create a new window
# to the right of the current window.
bind -n M-+ new-window -a

# We can zoom a panel so that
# it takes up the entire space
# in a window using Alt-z
bind -n M-z resize-pane -Z




########################
### Misc Keybindings ###
########################

bind-key -n M-Space copy-mode
bind-key -n M-v run "win32yank.exe -o | tmux load-buffer - ; tmux paste-buffer"
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-pipe "win32yank.exe -i"

# Home and End Keys in copy-mode should act as they
# do in a text editor. Home sends you to the start
# of a line; End sends you to the end of a line.
bind-key -T copy-mode-vi Home send-keys -X start-of-line
bind-key -T copy-mode-vi End  send-keys -X end-of-line

# Kinda annoying that escape does not exit copy-mode
# by default. This keybinding makes it so if you
# hit escape while in copy mode, it will exit.
bind-key -T copy-mode-vi Escape  copy-mode -q


# Bind Alt-RightClick to a context
# menu that allows you to perform
# various actions such as:
#    - copy & paste
#    - splitting panes
#    - creating & changing tabs (windows)
#    - renaming tabs (windows)
#    - zooming, respaning, killing panes
#
# The menu should like the ASCII art below:
#
# +--------------------+
# | Copy               |
# | Paste              |
# +--------------------+
# | Split (Horizontal) |
# | Split (Vertical)   |
# +--------------------+
# | Tab (Right)        |
# | Tab (Left)         |
# | Tab (New)          |
# | Tab (Rename)       |
# +--------------------+
# | Pane (Toggle Zoom) |
# | Pane (Respawn)     |
# | Pane (Kill)        |
# +--------------------+
#
# Note: the copy option is set to only
#       be available if there is currently
#       a selection to copy from.
copyBinary="win32yank.exe -i"
pasteBinary="win32yank.exe -o"
copyAction='send-keys -X copy-pipe "$copyBinary"'
bind-key -n M-MouseDown3Pane \
    display-menu -O \
                 -T "TMUX Menu"   \
                 -x M -y M \
                 '' \
                 '#{?selection_active,Copy,-Copy}'  '' $copyAction     \
                 'Paste' '' 'run "$pasteBinary | tmux load-buffer - ; tmux paste-buffer"'    \
                 ''               \
                 'Split (Horizontal)' '' 'split-window -v' \
                 'Split (Vertical)'   '' 'split-window -h' \
                 ""               \
                 'Tab (Right)'  '' 'next-window' \
                 'Tab (Left)'   '' 'previous-window' \
                 'Tab (New)'    '' 'new-window -a' \
                 'Tab (Rename)' '' 'command-prompt -I "#W" "rename-window -- \"%%\""' \
                 ''               \
                 'Pane (Toggle Zoom)' '' 'resize-pane -Z' \
                 'Pane (Respawn)'     '' 'respawn-pane -k' \
                 'Pane (Kill)'        '' 'kill-pane'
